name: Develop Deploy to VPS

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging

# env: 
#   if: github.ref == 'refs/heads/main' then
#   DOCKER_REGISTRY: ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{vars.VERSION_PRODUCTION}}
#   if: github.ref == 'refs/heads/dev'
#   DOCKER_REGISTRY: ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{vars.VERSION_DEV}}
#   if: github.ref == 'refs/heads/staging'
#   DOCKER_REGISTRY: ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{vars.VERSION_STAGING}}


jobs:
  test:
    runs-on: ubuntu-latest
    # environment: $ENVIRONMENT
    permissions:
      contents: read
      packages: write
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      CI: false
    steps:
      - name: Setup code
        uses: actions/checkout@v4

      - name: Setup node 18
        uses: actions/setup-node@v3
        with:
          node-version: "18.0.0"

      # Caching
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run test
        run: |
          echo "TESTING...."
          yarn upgrade
          yarn
          yarn build

  build:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    needs: test
    runs-on: ubuntu-latest
    # outputs:
    #   CONTAINER_NAME: ${{ steps.set-env.outputs.CONTAINER_NAME }}
    #   DOCKER_REGISTRY: ${{ steps.set-env.outputs.DOCKER_REGISTRY }}
    #   CONTAINER_NETWORK: ${{ steps.set-env.outputs.CONTAINER_NETWORK }}
    #   CONTAINER_PORT: ${{ steps.set-env.outputs.CONTAINER_PORT }}
    # environment: $ENVIRONMENT
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup code
        uses: actions/checkout@v4

      - name: update env
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
      - name: Set Docker Registry
        # id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_PRODUCTION }}" >> $GITHUB_ENV

          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_DEV }}" >> $GITHUB_ENV

          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_STAGING }}" >> $GITHUB_ENV

          fi
      # - name: Build and push docker image to ghcr
      #   uses: elgohr/Publish-Docker-Github-Action@v4
      #   with:
      #     name: ${{ vars.IMAGE_NAME }}
      #     registry: ${{ vars.CONTAINER_REGISTRY }}
      #     username: ${{ secrets.GH_USERNAME }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     tags: ${{ vars.IMAGE_TAG }}
      #     dockerfile: Dockerfile
      - name: Login to Docker Hub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_REGISTRY }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ env.DOCKER_REGISTRY }}

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    needs: build
    runs-on: ubuntu-latest
    # environment: $ENVIRONMENT
    steps:
      - name: Set Docker Registry
        # id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_PRODUCTION }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME_PRODUCTION }}" >> $GITHUB_ENV
            echo "CONTAINER_NETWORK=${{ vars.CONTAINER_NETWORK_PRODUCTION }}" >> $GITHUB_ENV
            echo "CONTAINER_PORT=${{ vars.CONTAINER_PORT_PRODUCTION }}" >> $GITHUB_ENV

          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_DEV }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME_DEV }}" >> $GITHUB_ENV   
            echo "CONTAINER_NETWORK=${{ vars.CONTAINER_NETWORK_DEV }}" >> $GITHUB_ENV
            echo "CONTAINER_PORT=${{ vars.CONTAINER_PORT_DEV }}" >> $GITHUB_ENV

          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ vars.VERSION_STAGING }}" >> $GITHUB_ENV
            echo "CONTAINER_NAME=${{ vars.CONTAINER_NAME_STAGING }}" >> $GITHUB_ENV           
            echo "CONTAINER_NETWORK=${{ vars.CONTAINER_NETWORK_STAGING }}" >> $GITHUB_ENV
            echo "CONTAINER_PORT=${{ vars.CONTAINER_PORT_STAGING }}" >> $GITHUB_ENV

          fi    
      - name: Deploy package to VPS
        uses: appleboy/ssh-action@v1.0.0
        # env:
        #   IMAGE: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}
        with:
          host: ${{ secrets.SERVER_HOST }} 
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          script: |
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }}  || true
            docker rmi ${{ env.DOCKER_REGISTRY }}  || true
            docker pull ${{ env.DOCKER_REGISTRY }}
            docker run -d --name ${{ env.CONTAINER_NAME }} --restart unless-stopped --network ${{ env.CONTAINER_NETWORK }} -p ${{ env.CONTAINER_PORT }}:80 ${{ env.DOCKER_REGISTRY }}
     # echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ secrets.GH_USERNAME }} --password-stdin
